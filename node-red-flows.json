[
    {
        "id": "sensors_flow",
        "type": "tab",
        "label": "API Endpoints",
        "disabled": false,
        "info": "HTTP endpoints for Python API integration"
    },
    {
        "id": "http_sensors",
        "type": "http in",
        "z": "sensors_flow",
        "name": "GET /sensors",
        "url": "/sensors",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [["process_sensors"]]
    },
    {
        "id": "process_sensors",
        "type": "function",
        "z": "sensors_flow",
        "name": "Generate Sensor Data",
        "func": "// Generate mock sensor data\nconst sensorData = {\n    timestamp: new Date().toISOString(),\n    sensors: [\n        {\n            id: \"temp_01\",\n            name: \"Temperature Sensor 1\",\n            type: \"temperature\",\n            value: Math.round((Math.random() * 15 + 20) * 100) / 100, // 20-35째C\n            unit: \"째C\",\n            status: \"online\",\n            location: \"Living Room\"\n        },\n        {\n            id: \"humid_01\",\n            name: \"Humidity Sensor 1\",\n            type: \"humidity\",\n            value: Math.round((Math.random() * 30 + 40) * 100) / 100, // 40-70%\n            unit: \"%\",\n            status: \"online\",\n            location: \"Living Room\"\n        },\n        {\n            id: \"light_01\",\n            name: \"Light Sensor 1\",\n            type: \"light\",\n            value: Math.round(Math.random() * 1000), // 0-1000 lux\n            unit: \"lux\",\n            status: \"online\",\n            location: \"Kitchen\"\n        },\n        {\n            id: \"motion_01\",\n            name: \"Motion Sensor 1\",\n            type: \"motion\",\n            value: Math.random() > 0.7 ? 1 : 0, // Random motion detection\n            unit: \"boolean\",\n            status: \"online\",\n            location: \"Hallway\"\n        }\n    ],\n    total_sensors: 4,\n    active_sensors: 4\n};\n\nmsg.payload = sensorData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [["http_sensors_response"]]
    },
    {
        "id": "http_sensors_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Sensor Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "http_devices",
        "type": "http in",
        "z": "sensors_flow",
        "name": "GET /devices",
        "url": "/devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [["process_devices"]]
    },
    {
        "id": "process_devices",
        "type": "function",
        "z": "sensors_flow",
        "name": "Generate Device Data",
        "func": "// Generate mock device data\nconst deviceData = {\n    timestamp: new Date().toISOString(),\n    devices: [\n        {\n            id: \"light_living_room\",\n            name: \"Living Room Light\",\n            type: \"light\",\n            status: \"on\",\n            brightness: Math.round(Math.random() * 100), // 0-100%\n            color: \"#FFFFFF\",\n            location: \"Living Room\",\n            power_consumption: Math.round(Math.random() * 20 + 5) // 5-25W\n        },\n        {\n            id: \"thermostat_main\",\n            name: \"Main Thermostat\",\n            type: \"thermostat\",\n            status: \"on\",\n            current_temp: Math.round((Math.random() * 5 + 22) * 10) / 10, // 22-27째C\n            target_temp: 24,\n            mode: \"heat\",\n            location: \"Living Room\"\n        },\n        {\n            id: \"fan_bedroom\",\n            name: \"Bedroom Fan\",\n            type: \"fan\",\n            status: Math.random() > 0.5 ? \"on\" : \"off\",\n            speed: Math.round(Math.random() * 3 + 1), // 1-4\n            location: \"Bedroom\",\n            power_consumption: Math.round(Math.random() * 50 + 10) // 10-60W\n        },\n        {\n            id: \"security_camera_01\",\n            name: \"Front Door Camera\",\n            type: \"camera\",\n            status: \"online\",\n            recording: true,\n            motion_detected: Math.random() > 0.8,\n            location: \"Front Door\"\n        }\n    ],\n    total_devices: 4,\n    online_devices: 4,\n    system_status: \"normal\"\n};\n\nmsg.payload = deviceData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [["http_devices_response"]]
    },
    {
        "id": "http_devices_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Device Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "http_control",
        "type": "http in",
        "z": "sensors_flow",
        "name": "POST /control",
        "url": "/control",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 240,
        "wires": [["process_control"]]
    },
    {
        "id": "process_control",
        "type": "function",
        "z": "sensors_flow",
        "name": "Process Control Command",
        "func": "// Process control commands\nlet response = {\n    timestamp: new Date().toISOString(),\n    status: \"success\",\n    message: \"Command processed successfully\"\n};\n\n// Check if payload exists\nif (!msg.payload) {\n    response.status = \"error\";\n    response.message = \"No command data received\";\n    msg.statusCode = 400;\n} else {\n    // Extract command data\n    const command = msg.payload;\n    \n    // Simulate command processing\n    if (command.device && command.action) {\n        response.device_id = command.device;\n        response.action_performed = command.action;\n        response.previous_state = \"unknown\";\n        response.new_state = command.action;\n        \n        // Add device-specific responses\n        switch (command.action.toLowerCase()) {\n            case \"on\":\n                response.message = `Device ${command.device} turned on successfully`;\n                break;\n            case \"off\":\n                response.message = `Device ${command.device} turned off successfully`;\n                break;\n            case \"toggle\":\n                response.message = `Device ${command.device} toggled successfully`;\n                response.new_state = Math.random() > 0.5 ? \"on\" : \"off\";\n                break;\n            default:\n                response.message = `Action ${command.action} executed on ${command.device}`;\n        }\n        \n        // Add brightness control for lights\n        if (command.brightness && (command.device.includes(\"light\") || command.device.includes(\"lamp\"))) {\n            response.brightness = command.brightness;\n            response.message += ` with brightness set to ${command.brightness}%`;\n        }\n        \n        // Add temperature control for thermostats\n        if (command.temperature && command.device.includes(\"thermostat\")) {\n            response.temperature = command.temperature;\n            response.message += ` with temperature set to ${command.temperature}째C`;\n        }\n        \n    } else {\n        response.status = \"error\";\n        response.message = \"Invalid command format. Expected {device, action}\";\n        msg.statusCode = 400;\n    }\n}\n\nmsg.payload = response;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nif (!msg.statusCode) {\n    msg.statusCode = 200;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [["http_control_response"]]
    },
    {
        "id": "http_control_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Control Response",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 240,
        "wires": []
    },
    {
        "id": "http_status",
        "type": "http in",
        "z": "sensors_flow",
        "name": "GET /status",
        "url": "/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 320,
        "wires": [["process_status"]]
    },
    {
        "id": "process_status",
        "type": "function",
        "z": "sensors_flow",
        "name": "Generate Status",
        "func": "// Generate system status\nconst statusData = {\n    timestamp: new Date().toISOString(),\n    system: {\n        status: \"online\",\n        uptime: Math.floor(Math.random() * 86400), // Random uptime in seconds\n        version: \"1.0.0\",\n        node_red_version: \"3.1.0\"\n    },\n    statistics: {\n        total_requests: Math.floor(Math.random() * 10000),\n        active_connections: Math.floor(Math.random() * 10),\n        memory_usage: Math.round(Math.random() * 50 + 30), // 30-80%\n        cpu_usage: Math.round(Math.random() * 60 + 10) // 10-70%\n    },\n    services: {\n        http_server: \"running\",\n        mqtt_broker: Math.random() > 0.1 ? \"running\" : \"stopped\",\n        database: Math.random() > 0.05 ? \"connected\" : \"disconnected\",\n        file_system: \"accessible\"\n    },\n    last_restart: new Date(Date.now() - Math.random() * 86400000).toISOString()\n};\n\nmsg.payload = statusData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [["http_status_response"]]
    },
    {
        "id": "http_status_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Status Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 320,
        "wires": []
    },
    {
        "id": "http_data_get",
        "type": "http in",
        "z": "sensors_flow",
        "name": "GET /data",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [["process_data_get"]]
    },
    {
        "id": "process_data_get",
        "type": "function",
        "z": "sensors_flow",
        "name": "Get Generic Data",
        "func": "// Generate generic data response\nconst genericData = {\n    timestamp: new Date().toISOString(),\n    data: {\n        measurements: [\n            {\n                id: \"measurement_1\",\n                value: Math.round(Math.random() * 100),\n                unit: \"units\",\n                timestamp: new Date().toISOString()\n            },\n            {\n                id: \"measurement_2\",\n                value: Math.round(Math.random() * 50 + 25),\n                unit: \"percentage\",\n                timestamp: new Date().toISOString()\n            }\n        ],\n        events: [\n            {\n                id: \"event_\" + Date.now(),\n                type: \"info\",\n                message: \"System operating normally\",\n                timestamp: new Date().toISOString()\n            }\n        ],\n        configuration: {\n            auto_refresh: true,\n            refresh_interval: 5000,\n            data_retention_days: 30\n        }\n    },\n    total_records: Math.floor(Math.random() * 1000)\n};\n\nmsg.payload = genericData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [["http_data_get_response"]]
    },
    {
        "id": "http_data_get_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Data Response",
        "statusCode": "200",
        "headers": {},
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "http_data_post",
        "type": "http in",
        "z": "sensors_flow",
        "name": "POST /data",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 480,
        "wires": [["process_data_post"]]
    },
    {
        "id": "process_data_post",
        "type": "function",
        "z": "sensors_flow",
        "name": "Store Data",
        "func": "// Process incoming data storage request\nlet response = {\n    timestamp: new Date().toISOString(),\n    status: \"success\",\n    message: \"Data stored successfully\"\n};\n\nif (!msg.payload) {\n    response.status = \"error\";\n    response.message = \"No data received\";\n    msg.statusCode = 400;\n} else {\n    // Simulate data storage\n    response.stored_data = msg.payload;\n    response.data_id = \"data_\" + Date.now();\n    response.storage_location = \"/data/\" + response.data_id;\n    response.size_bytes = JSON.stringify(msg.payload).length;\n    \n    // Add validation\n    if (typeof msg.payload === 'object') {\n        response.message = `Data object with ${Object.keys(msg.payload).length} fields stored successfully`;\n        response.fields = Object.keys(msg.payload);\n    } else {\n        response.message = \"Data stored successfully\";\n    }\n}\n\nmsg.payload = response;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nif (!msg.statusCode) {\n    msg.statusCode = 201; // Created\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [["http_data_post_response"]]
    },
    {
        "id": "http_data_post_response",
        "type": "http response",
        "z": "sensors_flow",
        "name": "Store Response",
        "statusCode": "",
        "headers": {},
        "x": 580,
        "y": 480,
        "wires": []
    }
]
