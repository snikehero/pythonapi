[
    {
        "id": "7466320fbf213b0d",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "http_sensors",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "GET /sensors",
        "url": "/sensors",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "be2ed85ec2af2537"
            ]
        ]
    },
    {
        "id": "http_sensors_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Sensor Response",
        "statusCode": "200",
        "headers": {},
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "http_devices",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "GET /devices",
        "url": "/devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "process_devices"
            ]
        ]
    },
    {
        "id": "process_devices",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Generate Device Data",
        "func": "// Generate mock device data\nconst deviceData = {\n    timestamp: new Date().toISOString(),\n    devices: [\n        {\n            id: \"light_living_room\",\n            name: \"Living Room Light\",\n            type: \"light\",\n            status: \"on\",\n            brightness: Math.round(Math.random() * 100), // 0-100%\n            color: \"#FFFFFF\",\n            location: \"Living Room\",\n            power_consumption: Math.round(Math.random() * 20 + 5) // 5-25W\n        },\n        {\n            id: \"thermostat_main\",\n            name: \"Main Thermostat\",\n            type: \"thermostat\",\n            status: \"on\",\n            current_temp: Math.round((Math.random() * 5 + 22) * 10) / 10, // 22-27°C\n            target_temp: 24,\n            mode: \"heat\",\n            location: \"Living Room\"\n        },\n        {\n            id: \"fan_bedroom\",\n            name: \"Bedroom Fan\",\n            type: \"fan\",\n            status: Math.random() > 0.5 ? \"on\" : \"off\",\n            speed: Math.round(Math.random() * 3 + 1), // 1-4\n            location: \"Bedroom\",\n            power_consumption: Math.round(Math.random() * 50 + 10) // 10-60W\n        },\n        {\n            id: \"security_camera_01\",\n            name: \"Front Door Camera\",\n            type: \"camera\",\n            status: \"online\",\n            recording: true,\n            motion_detected: Math.random() > 0.8,\n            location: \"Front Door\"\n        }\n    ],\n    total_devices: 4,\n    online_devices: 4,\n    system_status: \"normal\"\n};\n\nmsg.payload = deviceData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            [
                "http_devices_response"
            ]
        ]
    },
    {
        "id": "http_devices_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Device Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 160,
        "wires": []
    },
    {
        "id": "http_control",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "POST /control",
        "url": "/control",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "process_control"
            ]
        ]
    },
    {
        "id": "process_control",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Process Control Command",
        "func": "// Process control commands\nlet response = {\n    timestamp: new Date().toISOString(),\n    status: \"success\",\n    message: \"Command processed successfully\"\n};\n\n// Check if payload exists\nif (!msg.payload) {\n    response.status = \"error\";\n    response.message = \"No command data received\";\n    msg.statusCode = 400;\n} else {\n    // Extract command data\n    const command = msg.payload;\n    \n    // Simulate command processing\n    if (command.device && command.action) {\n        response.device_id = command.device;\n        response.action_performed = command.action;\n        response.previous_state = \"unknown\";\n        response.new_state = command.action;\n        \n        // Add device-specific responses\n        switch (command.action.toLowerCase()) {\n            case \"on\":\n                response.message = `Device ${command.device} turned on successfully`;\n                break;\n            case \"off\":\n                response.message = `Device ${command.device} turned off successfully`;\n                break;\n            case \"toggle\":\n                response.message = `Device ${command.device} toggled successfully`;\n                response.new_state = Math.random() > 0.5 ? \"on\" : \"off\";\n                break;\n            default:\n                response.message = `Action ${command.action} executed on ${command.device}`;\n        }\n        \n        // Add brightness control for lights\n        if (command.brightness && (command.device.includes(\"light\") || command.device.includes(\"lamp\"))) {\n            response.brightness = command.brightness;\n            response.message += ` with brightness set to ${command.brightness}%`;\n        }\n        \n        // Add temperature control for thermostats\n        if (command.temperature && command.device.includes(\"thermostat\")) {\n            response.temperature = command.temperature;\n            response.message += ` with temperature set to ${command.temperature}°C`;\n        }\n        \n    } else {\n        response.status = \"error\";\n        response.message = \"Invalid command format. Expected {device, action}\";\n        msg.statusCode = 400;\n    }\n}\n\nmsg.payload = response;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nif (!msg.statusCode) {\n    msg.statusCode = 200;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [
            [
                "http_control_response"
            ]
        ]
    },
    {
        "id": "http_control_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Control Response",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 240,
        "wires": []
    },
    {
        "id": "http_status",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "GET /status",
        "url": "/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "process_status"
            ]
        ]
    },
    {
        "id": "process_status",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Generate Status",
        "func": "// Generate system status\nconst statusData = {\n    timestamp: new Date().toISOString(),\n    system: {\n        status: \"online\",\n        uptime: Math.floor(Math.random() * 86400), // Random uptime in seconds\n        version: \"1.0.0\",\n        node_red_version: \"3.1.0\"\n    },\n    statistics: {\n        total_requests: Math.floor(Math.random() * 10000),\n        active_connections: Math.floor(Math.random() * 10),\n        memory_usage: Math.round(Math.random() * 50 + 30), // 30-80%\n        cpu_usage: Math.round(Math.random() * 60 + 10) // 10-70%\n    },\n    services: {\n        http_server: \"running\",\n        mqtt_broker: Math.random() > 0.1 ? \"running\" : \"stopped\",\n        database: Math.random() > 0.05 ? \"connected\" : \"disconnected\",\n        file_system: \"accessible\"\n    },\n    last_restart: new Date(Date.now() - Math.random() * 86400000).toISOString()\n};\n\nmsg.payload = statusData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 320,
        "wires": [
            [
                "http_status_response"
            ]
        ]
    },
    {
        "id": "http_status_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Status Response",
        "statusCode": "200",
        "headers": {},
        "x": 580,
        "y": 320,
        "wires": []
    },
    {
        "id": "http_data_get",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "GET /data",
        "url": "/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "process_data_get"
            ]
        ]
    },
    {
        "id": "process_data_get",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Get Generic Data",
        "func": "// Generate generic data response\nconst genericData = {\n    timestamp: new Date().toISOString(),\n    data: {\n        measurements: [\n            {\n                id: \"measurement_1\",\n                value: Math.round(Math.random() * 100),\n                unit: \"units\",\n                timestamp: new Date().toISOString()\n            },\n            {\n                id: \"measurement_2\",\n                value: Math.round(Math.random() * 50 + 25),\n                unit: \"percentage\",\n                timestamp: new Date().toISOString()\n            }\n        ],\n        events: [\n            {\n                id: \"event_\" + Date.now(),\n                type: \"info\",\n                message: \"System operating normally\",\n                timestamp: new Date().toISOString()\n            }\n        ],\n        configuration: {\n            auto_refresh: true,\n            refresh_interval: 5000,\n            data_retention_days: 30\n        }\n    },\n    total_records: Math.floor(Math.random() * 1000)\n};\n\nmsg.payload = genericData;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 400,
        "wires": [
            [
                "http_data_get_response"
            ]
        ]
    },
    {
        "id": "http_data_get_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Data Response",
        "statusCode": "200",
        "headers": {},
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "http_data_post",
        "type": "http in",
        "z": "7466320fbf213b0d",
        "name": "POST /data",
        "url": "/data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "process_data_post"
            ]
        ]
    },
    {
        "id": "process_data_post",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Store Data",
        "func": "// Process incoming data storage request\nlet response = {\n    timestamp: new Date().toISOString(),\n    status: \"success\",\n    message: \"Data stored successfully\"\n};\n\nif (!msg.payload) {\n    response.status = \"error\";\n    response.message = \"No data received\";\n    msg.statusCode = 400;\n} else {\n    // Simulate data storage\n    response.stored_data = msg.payload;\n    response.data_id = \"data_\" + Date.now();\n    response.storage_location = \"/data/\" + response.data_id;\n    response.size_bytes = JSON.stringify(msg.payload).length;\n    \n    // Add validation\n    if (typeof msg.payload === 'object') {\n        response.message = `Data object with ${Object.keys(msg.payload).length} fields stored successfully`;\n        response.fields = Object.keys(msg.payload);\n    } else {\n        response.message = \"Data stored successfully\";\n    }\n}\n\nmsg.payload = response;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nif (!msg.statusCode) {\n    msg.statusCode = 201; // Created\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 480,
        "wires": [
            [
                "http_data_post_response"
            ]
        ]
    },
    {
        "id": "http_data_post_response",
        "type": "http response",
        "z": "7466320fbf213b0d",
        "name": "Store Response",
        "statusCode": "",
        "headers": {},
        "x": 580,
        "y": 480,
        "wires": []
    },
    {
        "id": "68db67f4ae170da9",
        "type": "s7 in",
        "z": "7466320fbf213b0d",
        "endpoint": "b0289146edb2b365",
        "mode": "all",
        "variable": "",
        "diff": true,
        "name": "DBs PLC to IOT",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "be2ed85ec2af2537",
                "449614a169975087",
                "dd8814adaed5b6db"
            ]
        ]
    },
    {
        "id": "c49737fabdc72ccd",
        "type": "debug",
        "z": "7466320fbf213b0d",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "be2ed85ec2af2537",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "function 1",
        "func": "// Function: Celda 5 y 6 (1 sola salida)\n\n// ¿Viene de HTTP In?\nconst isHttp = !!msg.req;\n\n// Si viene del S7, guarda el último payload y NO respondas HTTP\nif (!isHttp) {\n    // Guardamos el último snapshot de variables del PLC\n    flow.set('last_s7', msg.payload);\n    return null; // evita que llegue al http response sin req/res\n}\n\n// Si viene de HTTP, obtenemos el último snapshot\nconst entrada = flow.get('last_s7');\n\nif (!entrada) {\n    // Aún no hay datos leídos del PLC\n    msg.statusCode = 503;\n    msg.payload = { error: \"No hay datos del PLC todavía\" };\n    return msg;\n}\n\n// Helper para evitar \"undefined\"\nconst val = (k) => (entrada[k] === undefined || entrada[k] === null) ? null : entrada[k];\n\nconst values = [\n    { dataPointId: \"617f43ac702f4\", qualityCode: \"0\", value: val(\"Status33\") },\n    { dataPointId: \"ae65461255e34\", qualityCode: \"0\", value: val(\"Product Code33\") },\n    { dataPointId: \"cfca95c131284\", qualityCode: \"0\", value: val(\"Order ID33\") },\n    { dataPointId: \"b8044369d6154\", qualityCode: \"0\", value: val(\"Good Parts33\") },\n    { dataPointId: \"caad9c4eb62f4\", qualityCode: \"0\", value: val(\"Bad Parts33\") },\n    { dataPointId: \"5490ebf763694\", qualityCode: \"0\", value: val(\"Total Parts33\") },\n];\n\nmsg._time = new Date();\nmsg.payload = values;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 600,
        "wires": [
            [
                "http_sensors_response"
            ]
        ]
    },
    {
        "id": "429e55785a30666b",
        "type": "mindconnect",
        "z": "7466320fbf213b0d",
        "name": "",
        "configtype": "SHARED_SECRET",
        "agentconfig": "{\n  \"content\": {\n    \"baseUrl\": \"https://southgate.eu1.mindsphere.io\",\n    \"iat\": \"eyJraWQiOiJrZXktaWQtMSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJpc3MiOiJTQ0kiLCJzdWIiOiJmNjg5NjA4YzM3ODM0YTllYTI4MTk0OGMyZDNiZTg3NCIsImF1ZCI6IkFJQU0iLCJpYXQiOjE3NTY0OTEwMTYsIm5iZiI6MTc1NjQ5MTAxNiwiZXhwIjoxNzU3MDk1ODE2LCJqdGkiOiI5ZDY2N2UwZS1hYmFkLTQwZmEtYTVlYi1jMWVlNGY3YzJhMzEiLCJzY29wZSI6IklBVCIsInRlbiI6InRkY29uNDAiLCJ0ZW5fY3R4IjoibWFpbi10ZW5hbnQiLCJjbGllbnRfY3JlZGVudGlhbHNfcHJvZmlsZSI6WyJTSEFSRURfU0VDUkVUIl0sInNjaGVtYXMiOlsidXJuOnNpZW1lbnM6bWluZHNwaGVyZTp2MSJdfQ.sYhIks0ikBPwOaicJrXat9VldI-Z5FiXyzoU5OZy4VeyDRZidquzNhwLFjpuUTM71G0OSKCbR6S5INbn0mi_YDTOgGyzi1UcLOovyr8ZMN9BSkZj7RTVt9oOPfE1-LQxoKnjjkNY2DubNtzOCStH-KiBk3OouFbw0SLCA2z5VIx1MY_ThoHkDAalMn_DXw18g-B5imyIh2nLYzE__G0RtrzcoyOMWhB-Bn-CaJEQeD5U_4_jGzF4N3pUjhKRpvrXhJ5PCFKM6WAvZlTeY3MnTF7-yIuIlznY9_TbLpuC3drXRfiYjSU3gdyj7rO5hWfTF5F9mYWhisK6a9W0haTwRQ\",\n    \"clientCredentialProfile\": [\n      \"SHARED_SECRET\"\n    ],\n    \"clientId\": \"f689608c37834a9ea281948c2d3be874\",\n    \"tenant\": \"tdcon40\"\n  },\n  \"expiration\": \"2025-09-05T18:10:16.000Z\"\n}",
        "privatekey": "",
        "model": "",
        "validate": true,
        "validateevent": true,
        "chunk": false,
        "disablekeepalive": false,
        "emitcontrol": false,
        "datalakeonly": false,
        "supressverbosity": false,
        "retry": 3,
        "parallel": 1,
        "asyncduration": 10,
        "x": 570,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "449614a169975087",
        "type": "debug",
        "z": "7466320fbf213b0d",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 740,
        "wires": []
    },
    {
        "id": "dd8814adaed5b6db",
        "type": "function",
        "z": "7466320fbf213b0d",
        "name": "Celda5",
        "func": "let entrada = msg.payload;\n\nconst values = [\n    {\n        \"dataPointId\": \"617f43ac702f4\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Status33']}`\n    },\n    {\n        \"dataPointId\": \"ae65461255e34\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Product Code33']}`\n    },\n    {\n        \"dataPointId\": \"cfca95c131284\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Order ID33']}`\n    },\n    {\n        \"dataPointId\": \"b8044369d6154\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Good Parts33']}`\n    },\n    {\n        \"dataPointId\": \"caad9c4eb62f4\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Bad Parts33']}`\n    },\n    {\n        \"dataPointId\": \"5490ebf763694\",\n        \"qualityCode\": \"0\",\n        \"value\": `${entrada['Total Parts33']}`\n    }\n];\nmsg._time = new Date();\nmsg.payload = values;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 680,
        "wires": [
            [
                "c49737fabdc72ccd",
                "429e55785a30666b"
            ]
        ]
    },
    {
        "id": "b0289146edb2b365",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "10.10.10.150",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": "2",
        "cycletime": "3500",
        "timeout": "4500",
        "name": "con var demo driv",
        "vartable": [
            {
                "addr": "DB123,DINT0",
                "name": "Status33"
            },
            {
                "addr": "DB123,DINT4",
                "name": "Good Parts33"
            },
            {
                "addr": "DB123,DINT8",
                "name": "Bad Parts33"
            },
            {
                "addr": "DB123,DINT12",
                "name": "Total Parts33"
            },
            {
                "addr": "DB123,S16.50",
                "name": "Product Code33"
            },
            {
                "addr": "DB123,S272.50",
                "name": "Order ID33"
            }
        ]
    },
    {
        "id": "c15e2fd13dbe3384",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-s7": "3.1.1",
            "@mindconnect/node-red-contrib-mindconnect": "3.12.1"
        }
    }
]